var debug 	= require('debug')('chat');
var request = require('request');
var clone 	= require('clone');

function Chat(io){
	this.clients 		= {};
	this.consultants 	= {};
	this.tasks			= {};
	this.io 			= io;

	// URLS
	this.host 			= 'http://webconsult.local/';
	this.getconfigurl	= this.host + 'chat/getconfig'; // Получить конфигурацию чата
	this.sendoffline 	= this.host + 'tasks';

	// Шаблоны для объектов для клонирования -> clone
	this.objectTemplates = {
		clientsData : {
			ip 		: "" ,
			name 	: "" ,
			phone 	: "" ,
			message : ""
		}
	}
}

// Добавить клиента в массив клиентов
Chat.prototype.addClient = function(socket , data) {
	if('ip' in data){
		// Ищем клиента по кукису в массиве клиентов
		var clientip = this.findClientIp(data.ip);
		debug('Find result' , clientip);
		// если найден
		if (clientip){
			debug("Повторный вход :-)");
			// Просто обнавляем сокет клиента
			this.clients[clientip]['socket'] 		= socket;
			this.clients[clientip]['info']			= clone(this.objectTemplates.clientsData);
			this.clients[clientip]['info']['ip']	= data.ip;
		}else{
			debug("Добавили нового клиента");
			// Иначе добавляем нового клиента
			this.clients[data.ip] 			= {}
			this.clients[data.ip]['socket'] 	= socket;
		}

		if(Object.keys(this.consultants).length){
			for(var consultant in this.consultants){
				if(clientip){
					this.consultants[consultant]['socket'].emit('addClient' , this.clients[clientip]['info']);
				}
			}
		}
	}else{
		debug('Отрпавляем запрос на повторную авторизацию');
		socket.emit('registerAgain');
	}
};

// Добавить консультанта в массив консультантов
Chat.prototype.addConsultant = function(socket) {
	debug("Подключился консультант");
	this.consultants[socket.id]				={};
	this.consultants[socket.id]['socket'] 	= socket;
};

// Функция для удаления соединений из списков (клиентов и консультантов)
Chat.prototype.removeConnection = function(socket) {
	if (socket.id in this.clients){
		
	}else if (socket.id in this.consultants){
		delete this.consultants[socket.id];
	}
};

// Ищет клиента в массиве по ид кукиса
Chat.prototype.findClientIp = function(ip) {
	for(client in this.clients){
		if(client === ip){
			return client;
		}
	}

	return false;
};

// Ищет клиента в массиве по ид сокета
Chat.prototype.findClientSocket = function(socket) {
	var id = socket.id;

	if(Object.keys(this.clients).length){
		for (client in this.clients){
			if(this.clients[client]['socket']['id'] === id){
				debug("Найден клиент по соккету" , id);
				return client;
			}
		}
	}else{
		debug("База клиентов пуста" , this.clients);
		this.addClient(socket);
	}

	return false;
};

// Возвращает количество консультантов онлайн
Chat.prototype.issetConsultants = function() {
	return Object.keys(this.consultants).length;
};

// Получаем оффлайновую задачу
Chat.prototype.takeOfflineTask = function(data , socket) {
	var _this , search;

	_this = this;

	// Ищем информацию о пользователе в массиве для составления заявки по ид сокета
	search = this.findClientSocket(socket);
	// Если найден 
	if(search){
		debug('Клиент найден :-)' , search);
		// Добавляем в присланный массив инфорацию о кукисе
		data['ip'] = search;
		
		for(var parameter in data){
			this.clients[search]['info'][parameter] = data[parameter];
		}
		
		debug('Отправляемые данные' , data);

		request.post({url: this.sendoffline , form: data}, function(err,httpResponse,body){
			if(err){
				return debug('Ошибка отрпавки данных задачи' , err);
			}else{
				socket.emit('chatStatusMessage' , 'Сообщение успешно отрпавлено');
				return  debug('Загрузка новой задачи  на ' + _this.sendoffline + ', прошла успешно. Результат' , body);
			}
		});

	}else{
		debug('Не найден клиент во время добавления оффлайн сообщения');
	}
};

module.exports = Chat;